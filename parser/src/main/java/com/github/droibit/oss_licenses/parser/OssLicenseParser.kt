package com.github.droibit.oss_licenses.parser

import android.annotation.SuppressLint
import android.content.Context
import androidx.annotation.RestrictTo
import androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP
import androidx.annotation.WorkerThread
import androidx.core.content.res.ResourcesCompat.ID_NULL
import java.io.IOException
import okio.Source
import okio.buffer
import okio.source

private const val RES_LICENSES_METADATA = "third_party_license_metadata"
private const val RES_LICENSES = "third_party_licenses"

@RestrictTo(LIBRARY_GROUP)
class OssLicenseParser(
  private val context: Context,
) {
  @SuppressLint("DiscouragedApi")
  @WorkerThread
  @Throws(IOException::class)
  fun parse(ignoreLibraries: Set<String> = emptySet()): List<OssLicense> {
    val appContext = context.applicationContext
    val res = appContext.resources

    val licensesMetaDataResId =
      res.getIdentifier(RES_LICENSES_METADATA, "raw", appContext.packageName)
    val licensesResId =
      res.getIdentifier(RES_LICENSES, "raw", appContext.packageName)

    check(licensesResId != ID_NULL || licensesMetaDataResId != ID_NULL) {
      "Third party library license resources generated by OSS Licenses Gradle Plugin dose not exist."
    }

    return parse(
      licensesSource = res.openRawResource(licensesResId).source(),
      licensesMetadataSource = res.openRawResource(licensesMetaDataResId).source(),
      ignoreLibraries = ignoreLibraries,
    )
  }

  internal fun parse(
    licensesSource: Source,
    licensesMetadataSource: Source,
    ignoreLibraries: Set<String> = emptySet(),
  ): List<OssLicense> {
    val licenseMetadata = licensesMetadataSource.buffer()
      .use { source ->
        buildSet {
          while (true) {
            val line = source.readUtf8Line() ?: break
            val (byteRange, name) = line.split(" ", limit = 2)
            if (name in ignoreLibraries) {
              continue
            }
            val (beginIndex, byteCount) = byteRange.split(":").map(String::toInt)
            val metadata = OssLicenseMetadata(
              name = name,
              beginIndex = beginIndex,
              byteCount = byteCount,
            )
            add(metadata)
          }
        }
      }

    val licenses = licensesSource.buffer().use {
      it.readByteString()
    }

    return licenseMetadata
      .map { metadata ->
        val license = licenses.substring(
          metadata.beginIndex,
          metadata.endIndex,
        )
        OssLicense(
          libraryName = metadata.name,
          license = license.utf8(),
        )
      }
      .sortedBy { it.libraryName.uppercase() }
  }
}

